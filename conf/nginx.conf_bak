
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    server {
            listen    443;
            ssl_certificate      cert.pem;
            ssl_certificate_key  cert.key;
            location   /auth {
            rewrite ^ http://$host$request_uri? permanent;
            root   html;
           # add_header Set-Cookie cip=$remote_addr;
        }
    }

    server {
        #listen       8088;
       
        #server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
        
        location / {
                proxy_pass http://localhost:81;
        }
       

        location /auth1 {
                default_type 'text/html; charset=UTF-8';
                lua_code_cache  off;
                access_by_lua_file  conf/lua/authenticate.lua;
                proxy_pass http://localhost:81$uri;
        
	    #content_by_lua '
        #local redis = require "resty.redis"
        #local red = redis:new()

        #red:set_timeout(1000) -- 1 sec

        #local ok, err = red:connect("127.0.0.1", 6379)
        #if not ok then
        #    ngx.say("failed to connect: ", err)
        #    return
        #end

        #local res, err = red:auth("foobared")
        #if not res then
        #    ngx.say("failed to authenticate: ", err)
        #    return
        #end
        #red:hmset("myhash", "field1", "value1", "field2", "value2")
        #';
        }
    
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
        location   /auth {
            root   html;
           # add_header Set-Cookie cip=$remote_addr;
        }
        location /api {
                #proxy_pass http://localhost:88/api/Auth;
                proxy_pass http://localhost:88/Auth;
                #content_by_lua 'ngx.say("done")';
                #proxy_pass  http://localhost:53443/Auth/Login;
               
        }
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
